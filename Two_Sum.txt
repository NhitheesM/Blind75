// Javascript

// Hashmap Approach
var twoSum = function(nums, target) {
    let hashMap = new Map()
    for(let i=0; i<nums.length; i++){
        let complement = target - nums[i]
        if(hashMap.has(complement)){
            return [hashMap.get(complement),i]
        }
        else {
            hashMap.set(nums[i],i)
        }
    }
    return [];
};

// Two pointer
var twoSum = function(nums, target) {
    let numsWithIndex = nums.map((num, index)=> [num, index]);
    numsWithIndex.sort((a,b) => (a[0]-b[0]));
    let left=0, right=nums.length-1;
    while(left<right){
        let sum = numsWithIndex[left][0]+numsWithIndex[right][0];
        if(sum===target){
            return [numsWithIndex[left][1], numsWithIndex[right][1]]
        }
        else if(sum<target){
            left++
        }else{
            right--
        }
    }
    return [];
};

//Rust
// Hashmap 
use std::collections::HashMap;

impl Solution {
    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {
        let mut numsMap = HashMap::new();
        for (i, &num) in nums.iter().enumerate(){
            let complement = target - num;
            if let Some(&complement_index)= numsMap.get(&complement){
                return vec![complement_index as i32, i as i32];
            }
            numsMap.insert(num,i);
        }
        vec![]
    }
}


